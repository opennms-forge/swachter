Vagrant.configure("2") do |config|

  host_home = ENV['HOME']
  bridge_interface = ENV['VAGRANT_BOX_BRIDGE_INTERFACE']
  static_ip = ENV['VAGRANT_BOX_STATIC_IP']

  config.vm.box = "ubuntu/focal64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # config.vm.network "forwarded_port", guest: 161, host: 161, auto_correct: false, protocol: 'udp'

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.44.44"
  # config.vm.network "private_network", ip: "192.168.50.4"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network", bridge: bridge_interface, ip: static_ip

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "d:\\", "/d"

  config.vm.synced_folder host_home, "/host-home"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
  
    # Customize the amount of memory on the VM:
    vb.memory = "8192"
	  vb.cpus = 4
	  vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL

    # abort script execution when a command fails; propagate that behaviour to nested scripts
    set -e
    export SHELLOPTS

    SECONDS=0

    export VAGRANT_USER_HOME=/home/vagrant

    cd /vagrant/provision
    chmod +x *.sh

    ./provision-bash.sh
    ./provision-tools.sh
    ./provision-snmp.sh
    ./provision-pmacct.sh

    duration=$SECONDS

    cat <<EOM

### virtual machine ready
###
### -> provisioning took $SECONDS seconds
### -> look into readme.md for information about the box

EOM
  SHELL

end
